name: Build Multi-Platform Libraries

on:
  push:
    branches: [main, 'release-*']
  pull_request:
    branches: [main]
  workflow_call:
    inputs:
      build_type:
        description: 'Build type (Debug or Release)'
        required: false
        default: 'Release'
        type: string
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (Debug or Release)'
        required: false
        default: 'Release'
        type: choice
        options:
          - Debug
          - Release

jobs:
  build-macos:
    name: Build macOS Libraries
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]
        lib_type: [static, shared]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Ninja (macOS)
        shell: bash
        run: brew install ninja

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 14.3.1

      - name: Build Library
        run: |
          BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          LIB_TYPE_UPPER=$(echo "${{ matrix.lib_type }}" | tr '[:lower:]' '[:upper:]')

          # Create build directory
          BUILD_DIR="build_darwin_${{ matrix.arch }}_${LIB_TYPE_UPPER}"
          OUTPUT_DIR="build_output/darwin/${{ matrix.arch }}/${{ matrix.lib_type }}"

          # Modify CMakeLists.txt for library type
          cp yoga/CMakeLists.txt yoga/CMakeLists.txt.bak
          sed -i.tmp "s/add_library(yogacore STATIC/add_library(yogacore ${LIB_TYPE_UPPER}/" yoga/CMakeLists.txt
          rm -f yoga/CMakeLists.txt.tmp

          # Configure and build (only yoga lib for cross-arch to avoid test execution issues)
          if [ "${{ matrix.arch }}" != "x86_64" ]; then
            CMAKE_SOURCE_DIR="yoga"
          else
            CMAKE_SOURCE_DIR="."
          fi

          # Set performance optimization flags
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            PERF_FLAGS="-DCMAKE_C_FLAGS_RELEASE='-O3 -DNDEBUG -march=x86-64 -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto' -DCMAKE_CXX_FLAGS_RELEASE='-O3 -DNDEBUG -march=x86-64 -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto'"
          else
            PERF_FLAGS="-DCMAKE_C_FLAGS_RELEASE='-O3 -DNDEBUG -march=armv8-a -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto' -DCMAKE_CXX_FLAGS_RELEASE='-O3 -DNDEBUG -march=armv8-a -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto'"
          fi

          cmake -S "$CMAKE_SOURCE_DIR" -B "$BUILD_DIR" \
            -G Ninja \
            -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            -DCMAKE_OSX_ARCHITECTURES=${{ matrix.arch }} \
            -DCMAKE_SYSTEM_NAME=Darwin \
            $PERF_FLAGS

          cmake --build "$BUILD_DIR" --config "$BUILD_TYPE" -j$(sysctl -n hw.ncpu)

          # Organize output
          mkdir -p "$OUTPUT_DIR"
          if [ "${{ matrix.lib_type }}" = "static" ]; then
            find "$BUILD_DIR" -name "libyogacore.a" | head -1 | xargs -I {} cp {} "$OUTPUT_DIR/"
          else
            find "$BUILD_DIR" -name "libyogacore.dylib" | head -1 | xargs -I {} cp {} "$OUTPUT_DIR/"
          fi

          # Copy headers
          mkdir -p "$OUTPUT_DIR/include"
          find yoga -name "*.h" -exec cp {} "$OUTPUT_DIR/include/" \;

          # Restore original CMakeLists.txt
          mv yoga/CMakeLists.txt.bak yoga/CMakeLists.txt

          # Clean build directory
          rm -rf "$BUILD_DIR"

      - name: Package Artifacts
        run: |
          cd build_output/darwin/${{ matrix.arch }}/${{ matrix.lib_type }}
          tar -czf ../../../darwin-${{ matrix.arch }}-${{ matrix.lib_type }}.tar.gz *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yoga-darwin-${{ matrix.arch }}-${{ matrix.lib_type }}
          path: build_output/darwin-${{ matrix.arch }}-${{ matrix.lib_type }}.tar.gz
          retention-days: 30

  build-linux:
    name: Build Linux Libraries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
        lib_type: [static, shared]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup-cpp
        with:
          toolchain: GCC

      - name: Install Cross-Compilation Tools
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Build Library
        run: |
          BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          LIB_TYPE_UPPER=$(echo "${{ matrix.lib_type }}" | tr '[:lower:]' '[:upper:]')

          # Create build directory
          BUILD_DIR="build_linux_${{ matrix.arch }}_${LIB_TYPE_UPPER}"
          OUTPUT_DIR="build_output/linux/${{ matrix.arch }}/${{ matrix.lib_type }}"

          # Modify CMakeLists.txt for library type
          cp yoga/CMakeLists.txt yoga/CMakeLists.txt.bak
          sed -i "s/add_library(yogacore STATIC/add_library(yogacore ${LIB_TYPE_UPPER}/" yoga/CMakeLists.txt

          # Set toolchain args for cross-compilation
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            TOOLCHAIN_ARGS="-DCMAKE_SYSTEM_NAME=Linux -DCMAKE_SYSTEM_PROCESSOR=aarch64 -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++"
          else
            TOOLCHAIN_ARGS=""
          fi

          # Configure and build (only yoga lib for cross-compilation to avoid test execution issues)
          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            CMAKE_SOURCE_DIR="yoga"
          else
            CMAKE_SOURCE_DIR="."
          fi

          # Set performance optimization flags
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            PERF_FLAGS="-DCMAKE_C_FLAGS_RELEASE='-O3 -DNDEBUG -march=x86-64 -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto' -DCMAKE_CXX_FLAGS_RELEASE='-O3 -DNDEBUG -march=x86-64 -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto'"
          else
            PERF_FLAGS="-DCMAKE_C_FLAGS_RELEASE='-O3 -DNDEBUG -march=armv8-a -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto' -DCMAKE_CXX_FLAGS_RELEASE='-O3 -DNDEBUG -march=armv8-a -mtune=generic -fomit-frame-pointer -funroll-loops -ffast-math -flto'"
          fi

          cmake -S "$CMAKE_SOURCE_DIR" -B "$BUILD_DIR" \
            -G Ninja \
            -DCMAKE_BUILD_TYPE="$BUILD_TYPE" \
            $TOOLCHAIN_ARGS \
            $PERF_FLAGS

          cmake --build "$BUILD_DIR" --config "$BUILD_TYPE" -j$(nproc)

          # Organize output
          mkdir -p "$OUTPUT_DIR"
          if [ "${{ matrix.lib_type }}" = "static" ]; then
            find "$BUILD_DIR" -name "libyogacore.a" | head -1 | xargs -I {} cp {} "$OUTPUT_DIR/"
          else
            find "$BUILD_DIR" -name "libyogacore.so" | head -1 | xargs -I {} cp {} "$OUTPUT_DIR/"
          fi

          # Copy headers
          mkdir -p "$OUTPUT_DIR/include"
          find yoga -name "*.h" -exec cp {} "$OUTPUT_DIR/include/" \;

          # Restore original CMakeLists.txt
          mv yoga/CMakeLists.txt.bak yoga/CMakeLists.txt

          # Clean build directory
          rm -rf "$BUILD_DIR"

      - name: Package Artifacts
        run: |
          cd build_output/linux/${{ matrix.arch }}/${{ matrix.lib_type }}
          tar -czf ../../../linux-${{ matrix.arch }}-${{ matrix.lib_type }}.tar.gz *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yoga-linux-${{ matrix.arch }}-${{ matrix.lib_type }}
          path: build_output/linux-${{ matrix.arch }}-${{ matrix.lib_type }}.tar.gz
          retention-days: 30

  build-windows:
    name: Build Windows Libraries
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [x64, ARM64]
        lib_type: [static, shared]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup MSVC
        uses: microsoft/setup-msbuild@v2

      - name: Setup Ninja
        uses: ./.github/actions/install-ninja

      - name: Build Library
        shell: cmd
        run: |
          set BUILD_TYPE=${{ github.event.inputs.build_type || 'Release' }}
          set ARCH=${{ matrix.arch }}
          set LIB_TYPE=${{ matrix.lib_type }}

          rem Convert lib_type to uppercase
          if "%LIB_TYPE%"=="static" set LIB_TYPE_UPPER=STATIC
          if "%LIB_TYPE%"=="shared" set LIB_TYPE_UPPER=SHARED

          rem Convert arch for cmake
          if "%ARCH%"=="x64" set CMAKE_ARCH=x64
          if "%ARCH%"=="ARM64" set CMAKE_ARCH=ARM64

          rem Setup MSVC environment
          if "%ARCH%"=="x64" (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          ) else (
            call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsamd64_arm64.bat"
          )

          rem Create build directory
          set BUILD_DIR=build_windows_%ARCH%_%LIB_TYPE_UPPER%
          set OUTPUT_DIR=build_output\windows\%ARCH%\%LIB_TYPE%

          rem Modify CMakeLists.txt for library type
          copy yoga\CMakeLists.txt yoga\CMakeLists.txt.bak
          powershell -Command "(Get-Content yoga\CMakeLists.txt) -replace 'add_library\(yogacore STATIC', 'add_library(yogacore %LIB_TYPE_UPPER%' | Set-Content yoga\CMakeLists.txt"

          rem Configure and build
          rem Set performance optimization flags for Windows
          if "%ARCH%"=="x64" (
            set PERF_FLAGS=-DCMAKE_C_FLAGS_RELEASE="/O2 /Ob2 /Oi /Ot /Oy /GL /DNDEBUG" -DCMAKE_CXX_FLAGS_RELEASE="/O2 /Ob2 /Oi /Ot /Oy /GL /DNDEBUG" -DCMAKE_EXE_LINKER_FLAGS_RELEASE="/LTCG /OPT:REF /OPT:ICF" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="/LTCG /OPT:REF /OPT:ICF"
          ) else (
            set PERF_FLAGS=-DCMAKE_C_FLAGS_RELEASE="/O2 /Ob2 /Oi /Ot /GL /DNDEBUG" -DCMAKE_C_FLAGS_RELEASE="/O2 /Ob2 /Oi /Ot /GL /DNDEBUG" -DCMAKE_EXE_LINKER_FLAGS_RELEASE="/LTCG /OPT:REF /OPT:ICF" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="/LTCG /OPT:REF /OPT:ICF"
          )

          cmake -S . -B %BUILD_DIR% ^
            -G Ninja ^
            -DCMAKE_BUILD_TYPE=%BUILD_TYPE% ^
            -DCMAKE_SYSTEM_NAME=Windows ^
            -DCMAKE_SYSTEM_PROCESSOR=%CMAKE_ARCH% ^
            %PERF_FLAGS%

          cmake --build %BUILD_DIR% --config %BUILD_TYPE% -j4

          rem Organize output
          if not exist "%OUTPUT_DIR%" mkdir "%OUTPUT_DIR%"
          if "%LIB_TYPE%"=="static" (
            for /r %BUILD_DIR% %%f in (yogacore.lib) do copy "%%f" "%OUTPUT_DIR%\" >nul 2>&1
          ) else (
            for /r %BUILD_DIR% %%f in (yogacore.dll) do copy "%%f" "%OUTPUT_DIR%\" >nul 2>&1
            for /r %BUILD_DIR% %%f in (yogacore.lib) do copy "%%f" "%OUTPUT_DIR%\" >nul 2>&1
          )

          rem Copy headers
          if not exist "%OUTPUT_DIR%\include" mkdir "%OUTPUT_DIR%\include"
          for /r yoga %%f in (*.h) do copy "%%f" "%OUTPUT_DIR%\include\" >nul 2>&1

          rem Restore original CMakeLists.txt
          move yoga\CMakeLists.txt.bak yoga\CMakeLists.txt

          rem Clean build directory
          rmdir /s /q %BUILD_DIR%

      - name: Package Artifacts
        shell: powershell
        run: |
          $arch = "${{ matrix.arch }}".ToLower()
          $libType = "${{ matrix.lib_type }}"
          cd "build_output/windows/$arch/$libType"
          tar -czf "../../../windows-$arch-$libType.tar.gz" *

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: yoga-windows-${{ matrix.arch }}-${{ matrix.lib_type }}
          path: build_output/windows-${{ matrix.arch }}-${{ matrix.lib_type }}.tar.gz
          retention-days: 30

  create-release-bundle:
    name: Create Release Bundle
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux, build-windows]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release-'))

    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release Bundle
        run: |
          mkdir -p release-bundle
          cd artifacts

          # Extract all tar.gz files into organized structure
          for artifact_dir in */; do
            artifact_name=${artifact_dir%/}
            if [ -f "$artifact_dir"/*.tar.gz ]; then
              platform_arch_type=$(echo "$artifact_name" | sed 's/yoga-//')
              platform=$(echo "$platform_arch_type" | cut -d'-' -f1)
              arch=$(echo "$platform_arch_type" | cut -d'-' -f2)  
              lib_type=$(echo "$platform_arch_type" | cut -d'-' -f3)
              
              mkdir -p "../release-bundle/$platform/$arch/$lib_type"
              tar -xzf "$artifact_dir"/*.tar.gz -C "../release-bundle/$platform/$arch/$lib_type"
            fi
          done

          # Create final archive
          cd ../release-bundle
          tar -czf "../yoga-multiplatform-libs.tar.gz" *

      - name: Upload Release Bundle
        uses: actions/upload-artifact@v4
        with:
          name: yoga-multiplatform-libs-bundle
          path: yoga-multiplatform-libs.tar.gz
          retention-days: 90
